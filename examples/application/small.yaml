APIVersion: "v1"
Kind: "Application"
Spec:
  - Name: "kubernetes-apache-tika"
    ClusterName: "gke_beamery-trials_us-east4_testcluster"
    Namespace: "tika"
    Git: "git@github.com:AlexsJones/kubernetes-apache-tika.git"
    Action:
      - Execute:
          Kind: "shell"
          Configuration:
            Command: pwd
            Path: ../ #Optional value
      - Execute:
          Kind: "shell"
          Configuration:
            Command: ./build_environment.sh default
      - Execute:
          Kind: "kubernetes"
          Configuration:
            Path: deployment #Optional value
  - Name: "kubernetes-mongodb-cluster"
    ClusterName: "gke_beamery-trials_us-east4_testcluster"
    Namespace: "mongodb"
    Git: "git@github.com:AlexsJones/kubernetes-mongodb-cluster.git"
    WaitForNamespace:
    - "tika"
    Action:
      - Execute:
          Kind: "shell"
          Configuration:
            Command: ./build_environment.sh dev
      - Execute:
          Kind: "kubernetes"
          Configuration:
            Path: deployment #Optional value

# Idea:
# 1- Read all files and merge all apps together. Example: [App1, App2]
# 2- Group by cluster.
#    Example:  { "trials": [App1, App2] }
# 3- group each cluster by namespace
#    Example: { "trials": { "mongo": [App1], "rabbit": [App2] }
# 4- Deploy each array of applications parallely
#    Example:
#        for clusterNames, namespaces in {"trials": {"mongo": [App1], "rabbit": [App2]}}
#            for namespace, appSlice in namespaces {
#                deployAppsInParallel(appSlice, clusterName, namespace)
#            }}
#
#  - Note: Each namespace has a waitgroup { "trials": { "mongo": wg, "rabbit": wg }
#  - Note: Apps that have a dependency, will wait for a waitGroup of that namespace
#    Example:
#        waitgroups = {"trials": {"mongo": waitGroup, "rabbit": waitGroup}}
#
#
#        for clusterNames, namespaces in {"trials": {"mongo": [App1], "rabbit": [App2]}}
#            namespaceWaits := make([string]waitGroup)
#            for namespace, appSlice in namespaces {
#              namespaceWaits[namespace] = waitgroup
#              namespaceWaits[namespace].Add(1)
#            }
#            for namespace, appSlice in namespaces {
#                deployAppsInParallel(namespaceWaits, appSlice, clusterName, namespace)
#                namespaceWaits[namespace].Done()
#            }}

