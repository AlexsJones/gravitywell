APIVersion: "v1"
Kind: "ApplicationList"
Items:
  - Name: "kubernetes-apache-tika"
    ClusterName: "gke_beamery-trials_us-east4_testcluster"
    Namespace: "tika"
    WaitForApplication:
    - "kubernetes-mongodb-cluster"
    Git: "git@github.com:AlexsJones/kubernetes-apache-tika.git"
    Action:
      - Execute:
          Kind: "shell"
          Configuration:
            Command: pwd
            Path: ../ #Optional value
      - Execute:
          Kind: "shell"
          Configuration:
            Command: ./build_environment.sh default
      - Execute:
          Kind: "kubernetes"
          Configuration:
            Path: deployment #Optional value
  - Name: "kubernetes-mongodb-cluster"
    ClusterName: "gke_beamery-trials_us-east4_testcluster"
    Namespace: "mongodb"
    Git: "git@github.com:AlexsJones/kubernetes-mongodb-cluster.git"
    Action:
      - Execute:
          Kind: "shell"
          Configuration:
            Command: ./build_environment.sh dev
      - Execute:
          Kind: "kubernetes"
          Configuration:
            Path: deployment #Optional value

# Idea:
# 1- Read all files and merge all apps together. Example: [App1, App2]
# 2- Create a wait group per application
#       waitGroups := {"App1Name": wg, "App2Name": wg}
# 3- Deploy each application parallely
#    Example:
#        waitGroups := make([string]sync.WaitGroup)
#        for app in [App1, App2] {
#          waitGroup[App.Name] := waitGroup.New
#          waitGroup[App.Name].Add(1)
#        }
#        for app in [App1, App2] {
#          go func() {
#            deployInParallel(app, waitGroups) # Here the app needs to wait for apps it depends on
#            waitGroups[app.Name].Done()
#          }
#        }
#        for wg in waitGroups {
#          wg.Wait()
#        }
#

